/*

Given a string n representing an integer,
return the closest integer (not including itself), which is a palindrome.
If there is a tie, return the smaller one.

The closest is defined as the absolute difference minimized between two integers.

Example 1:
  Input: n = "123"
  Output: "121"

Example 2:
  Input: n = "1"
  Output: "0"
  Explanation: 0 and 2 are the closest palindromes
    but we return the smallest which is 0.

Constraints:
- 1 <= n.length <= 18
- n consists of only digits.
- n does not have leading zeros.
- n is representing an integer in the range [1, 1018 - 1].

*/

var nearestPalindromic = function (n) {
  if (n.length == 1) return `${Math.abs(n - 1)}`

  const getLeftHalfPalindrome = (n, offset) => {
    const left = +n.slice(0, Math.floor((n.length + 1) / 2)) + offset
    const right = ('' + left)
      .split('')
      .reverse()
      .join('')
      .slice(n.length % 2, left.length)
    return left == 0 ? Infinity : left + right
  }

  const candidates = []

  // Candidate 1: Sequence of 9's of length (n.length - 1)
  candidates.push('9'.repeat(n.length - 1))
  // Candidate 2: The next power of 10 plus 1
  candidates.push(`${10 ** n.length + 1}`)
  // Candidate 3,4 and 5:
  //   The palindrome generated by mirroring the left side of n,
  //    and offsetting the half's value by -1, 0 and -1
  candidates.push(getLeftHalfPalindrome(n, -1))
  candidates.push(getLeftHalfPalindrome(n, 0))
  candidates.push(getLeftHalfPalindrome(n, 1))

  let min_diff = Infinity
  let answer
  for (let candidate of candidates) {
    const diff = Math.abs(n - candidate)
    if (diff != 0 && diff < min_diff) {
      min_diff = diff
      answer = candidate
    }
  }

  return answer
}
